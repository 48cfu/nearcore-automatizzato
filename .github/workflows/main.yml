name: nearcore-updater

on: [repository_dispatch]

env:
  DOCKER_BUILDKIT: 1 

jobs:
  build:
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false
      matrix:
        release-name: ["${{ github.event.client_payload.network }}"]
        version-name: ["${{ github.event.event_type }}"]
    steps:
      - uses: actions/checkout@v2
      - name: Ottienimento tag Github
        env: 
          RELEASE_NAME: ${{ matrix.release-name }} 
        run: |
          regex=""
          if [ "$RELEASE_NAME" == "mainnet" ]; then 
            regex="[0-9]+.[0-9]+.[0-9]+$"
          elif [ "$RELEASE_NAME" == "testnet" ]; then
            regex="[0-9]+.[0-9]+.[0-9]+-rc+"
          elif [ "$RELEASE_NAME" == "betanet" ]; then
            regex="[0-9]+.[0-9]+.[0-9]+-beta+" 
          fi
          echo $(curl -s https://api.github.com/repos/near/nearcore/releases | jq -c -r --arg regex "$regex" 'map(select(.tag_name | test($regex)))[0].tag_name') > tag-github.txt
          echo "TODODO\n"
          cat tag-github.txt
      - name: Ottienimento tags Docker Hub
        if: ${{ success() }}
        env:
          DOCKER_IMAGE_NAME: ${{ secrets.DOCKER_IMAGE_NAME }}
        run: |
          TOKEN=`curl -s "https://auth.docker.io/token?service=registry.docker.io&scope=repository:$DOCKER_IMAGE_NAME:pull" | jq '.token' | sed 's/"//g'`
          TAGS=`curl -s https://registry.hub.docker.com/v2/$DOCKER_IMAGE_NAME/tags/list -H "Authorization: Bearer $TOKEN" | jq ".tags[]" | sed 's/"//g'`
          github_tag=`cat tag-github.txt`
          for tag in $TAGS;
          do
            # if $github_tag contains in $tag
            if [[ $tag == *"$github_tag"* ]]; then
              echo "Tag:$tag gia' deployed"
              exit 1
            elif [ -z "$tag" ]; then
              # Crea un Dockerfile vuoto per l'immagine Docker con tag Github
              touch hello && echo "FROM scratch" > Dockerfile
              echo "ADD hello /" >> Dockerfile && echo 'CMD ["/hello"]' >> Dockerfile
            fi
          done
          
          echo "name=RELEASE_VERSION::$(echo $github_tag)" >> $GITHUB_ENV
          # If docker hub is empty
          if [ ${#TAGS[@]} -eq 1 ]; then
              touch hello && echo "FROM scratch" > Dockerfile
              echo "ADD hello /" >> Dockerfile && echo 'CMD ["/hello"]' >> Dockerfile
          fi
          
          echo "TODODO1\n"
          echo $GITHUB_ENV['RELEASE_VERSION']
          echo "TODODO2\n"
          echo ${{ matrix.release-name }}
          echo "TODODO3\n"
          echo ${{ matrix.version-name }}
      - name: Pubblicazione immagine del tag Github nel Registry
        if: ${{ success() }}
        uses: elgohr/Publish-Docker-Github-Action@master
        with:
          name: ${{ secrets.DOCKER_IMAGE_NAME }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          tags: ${{ env.RELEASE_VERSION }}

      - name: Installazione Rust
        if: ${{ success() }}
        uses: hecrj/setup-rust-action@v1
        with:
          rust-version: nightly-2020-03-19

      - name: Clonazione Nearcore
        if: ${{ success() }}
        uses: actions/checkout@v2
        with:
          repository: near/nearcore
          ref: ${{ env.RELEASE_VERSION }}

      - name: Pubblicazione immagine piu recente di Docker nel Registry
        if: ${{ success() }}
        uses: elgohr/Publish-Docker-Github-Action@master
        with:
          name: ${{ secrets.DOCKER_IMAGE_NAME }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          tags: ${{ matrix.release-name }}
